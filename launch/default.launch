<?xml version="1.0"?>
<launch>
  <!-- effort_controllers/joint_position_controller.cpp requires the urdf so that it can apply joint limits and so it knows if requested position should be considered to be mod 2pi -->
  <param name="robot_description" command="$(find xacro)/xacro $(find kortex_description)/robots/gen3_robotiq_2f_85.xacro sim:=false"/>
  <!-- load joint limits from param file (overwriting associated limits in URDF)-->
  <rosparam command="load" file="$(find kinova_gen3_control)/config/joint_limits.yaml"/>

  <rosparam command="load" file="$(find kinova_gen3_control)/config/kinova_gen3_controllers.yaml" ns="kinova_gen3_hardware_interface_node"/>

  <!-- just spawn (and never unload) these controllers https://github.com/ros-controls/ros_control/issues/304 -->
  <arg name="controllers_to_spawn" value="
                          joint_state_controller 
                          joint_1_position_controller
                          joint_2_position_controller
                          joint_3_position_controller
                          joint_4_position_controller
                          joint_5_position_controller
                          joint_6_position_controller
                          joint_7_position_controller" />
  <node name="kinova_gen3_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="--namespace kinova_gen3_hardware_interface_node $(arg controllers_to_spawn)"/>

  <node machine="control-computer" name="kinova_gen3_hardware_interface_node" pkg="kinova_gen3_control" type="kinova_gen3_control_node" respawn="false"
    output="screen">
    <param name="fake_connection" value="true"/>
  </node>
</launch>
